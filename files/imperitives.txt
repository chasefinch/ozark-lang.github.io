	# a class has:
	#	up to one inheritance (a superclass for which methods can have continuations and functions can have replacements)
	#	requirements (other classes and enumerations that are used within this class)
	#	classes (defined nested classes for use within this class)
	#	enumerations (defined nested enumerations for use within this class)
	#	references (knowledge of libraries, which are sets of named functions that can be applied to values & variables)
	#	members (private typed pointers)
	#	properties (private typed variables)
	#	methods (routines which have inputs & outputs that can be values and/or objects, and which can set & get members & attributes)

	# values (stored in variables):
	#	Integer (+, -, =, >, ...)
	#	Ordinal			# 1, 2, 3, 4, @101101, &4A4...
	#	Cardinal		# 0, 1, 2, 3, ...
	#	Float
	#	Boolean (and, not, or, is)
	#	Enumeration (is)
	#	Character						# '1', 'A'. a string is a tuple of characters, with a literal of "Some String". Regular list literals do not apply.
	#	[Integer] (in, =, split, ...)	# this is a tuple. [3, var1, 3], [[3, 2], [1]], [true, [false, true]].
	#	{{Integer}}						# this is a set. {3, 5, 8} is the same as {8, 3, 5}, {[3, 4, 6], [3, 4], [[2, 5], [6, 1]]}
	#	<Boolean>						# this is a bag. <3, 5, 8, 8> is the same as <5, 8, 3, 8>

	# objects (stored in pointers):
	#	Application
	#	Rifleman
	#	HTTPRequest
	#	HTTPResponse
	#	Dictionary by String of String
	#	Array of Rifleman
	#	...




	create spaceships:Array of Spacecraft
	create spaceships:Dictionary by Integer of Spacecraft
	create encyclopedia:Dictionary by String of String
	create tree:CrazyTree of Integer, Spacecraft




	"Some String" # a string


	

	create location:Location initialize

--	set location <- currentLocation --		# not allowed

	location setValue currentLocation

	set my location <- currentLocation




	let threads:Integer <- 5




	member possibleSpaceship:Spaceship?	# this would have to be a member or the output of a function
	set possibleSpaceship <- actualSpaceship

	unset spaceship

--	possibleSpaceship takeoff --	# not allowed

	possibleSpaceship! takeoff \
		catch exception:NoValueException

	possibleSpaceship! value -> spaceship \
		catch exception:NoValueException
			exception setMessage 'No value.'
			raise exception

	spaceship takeoff

--	unset spaceship --	# not allowed




	set my pointer <- newValue
	set output <- my var




	set pointer <- value




	if var1 and (not var2 or var3)
		foo doAction




	someObject doSomethingWithBoolean (var1 and not var2)




	someObject doSomethingWithInteger 3

	someObject doSomethingWithInteger 3 + var1

	someObject doSomethingWithFloat root(3, 3 + var1 % 4)




	# expression literal:

	3 + var1
	3 + var1 % 4
	sqrt(4 + 1)
	sqrt(4)




	loop var1 -> condition
		timer time -> time
		bar testSomething with:time -> result
		set condition <- result




	each foo as f     # valid for tuple, set, bag
		each bar as b
	  		someObject doSomething to:f and:b




	each range(1, 10) as i 		# valid for tuple, set, bag
		io print i



	iterableObjectSet count -> count

	each range(1, count) as i
		iterableObjectSet objectAt i -> object1
		object1 doSomething with:somethingElse




	dictionaryObjectSet keys -> keys

	each keys as k
		dictionaryObjectSet objectWithKey -> object1
		object1 doSomething with:somethingElse



	
	io print value				# prints 2.5






